---
- name: Set hostname
  hostname:
    name: "{{ inventory_hostname }}"
  when: not inventory_hostname is match('(\d{1,3}\.){3}\d{1,3}')

- name: Set hostname in /etc/hosts
  lineinfile:
    dest: /etc/hosts
    regexp: "^127.0.1.1.+$"
    line: "127.0.1.1	{{ inventory_hostname }} {{ inventory_hostname_short }}"

- name: Refresh apt cache
  apt:
    update_cache: yes
  changed_when: false

- name: Install https support for apt
  apt:
    pkg:
      - apt-transport-https
    state: present
  when: not (ansible_distribution == "Debian" and ansible_distribution_version is version('10', '>='))

- name: Install gnupg on newer ubuntu/debian
  apt:
    pkg:
      - gnupg
    state: present
  when: >
    (ansible_distribution == "Debian" and ansible_distribution_version is version('9', '>=')) or
    (ansible_distribution == "Ubuntu" and ansible_distribution_version is version('18.04', '>='))

- name: Install gnupg2 on older ubuntu/debian
  apt:
    pkg:
      - gnupg2
    state: present
  when: >
    (ansible_distribution == "Debian" and ansible_distribution_version is version('9', '<')) or
    (ansible_distribution == "Ubuntu" and ansible_distribution_version is version('18.04', '<'))

- name: Configure apt mirror
  template:
    src: "templates/sources.list.{{ ansible_distribution|lower }}"
    dest: /etc/apt/sources.list
  when: ansible_os_family == "Debian"
  register: apt_mirror

- name: Refresh apt cache when mirror changes
  apt:
    update_cache: yes
  when: apt_mirror.changed == true

- name: Enable backports repo on Debian machines
  apt_repository:
    filename: "debian-backports"
    repo: "deb {{ debian_mirror }} {{ debian_backports_components }}"
    update_cache: yes
    state: present
  when: ansible_distribution == "Debian"

- name: Install needrestart
  apt:
    pkg: needrestart
    state: present

- name: Install needrestart from backports on Debian Stretch
  apt:
    pkg: needrestart
    default_release: "{{ansible_distribution_release}}-backports"
    state: latest
  when:
    - ansible_distribution == "Debian"
    - ansible_distribution_release == "stretch"

- name: Add keys for useful repos
  apt_key:
    url: "{{ item.key.url }}"
    id: "{{ item.key.id | default(omit) }}"
    state: present
  with_items: "{{ useful_repos }}"

- name: Add useful repos
  apt_repository:
    repo: "{{ item.repo }}"
    filename: "{{ item.name }}"
    update_cache: yes
    state: present
  with_items: "{{ useful_repos }}"

- name: Install useful packages
  apt:
    pkg: "{{ useful_packages }}"
    state: present

- name: Install nfs-common
  apt:
    name: nfs-common
    state: present
  when: storage_mounts | selectattr('fstype', 'match', 'nfs\d?') | list | length > 0

- name: Mount storage
  mount:
    src: "{{ item.src }}"
    path: "{{ item.path }}"
    fstype: "{{ item.fstype }}"
    opts: "{{ item.opts | default(omit) }}"
    state: mounted
  with_items: "{{ storage_mounts }}"

- name: Install intel microcode on physical hosts
  apt:
    pkg: "intel-microcode"
  when:
    - "ansible_virtualization_role == 'host'"
    - "ansible_processor | lower is search('intel')"

- name: Install amd64 microcode on physical hosts
  apt:
    pkg: "amd64-microcode"
  when:
    - "ansible_virtualization_role == 'host'"
    - "ansible_processor | lower is search('amd')"

- name: Install nonfree firmware
  apt:
    pkg: "firmware-linux-nonfree"
    install_recommends: no
  when:
    - ansible_system_vendor | lower is search("dell")
    - ansible_distribution == "Debian"

- name: Install LTS enablement stack on ubuntu
  apt:
    pkg: "linux-generic-hwe-{{ ansible_distribution_version }}"
  when: ansible_distribution == "Ubuntu"

- name: Add backend storage directory for /scratch
  file:
    path: "{{ scratch_backend_location }}"
    owner: root
    group: root
    mode: '1777'
    state: directory
  when: "scratch_backend_location != ''"

- name: Add a /scratch symlink
  file:
    src: "{{ scratch_backend_location }}"
    dest: "{{ scratch_dir }}"
    owner: root
    group: root
    state: link
  when: "scratch_backend_location != '' and not scratch_backend_location.startswith(scratch_dir)"

- name: Enable reboot on kernel panic
  sysctl:
    key: kernel.panic
    value: '20'
    sysctl_file: /etc/sysctl.d/kernel.panic.conf

- name: Enable kernel panic on oops
  sysctl:
    key: kernel.panic_on_oops
    value: '1'
    sysctl_file: /etc/sysctl.d/kernel.panic_on_oops.conf

- name: Set linux cmdline default options
  lineinfile:
    dest: /etc/default/grub
    backrefs: yes
    regexp: '^GRUB_CMDLINE_LINUX_DEFAULT="((?!.*{{ item }}.*).*)"$'
    line: 'GRUB_CMDLINE_LINUX_DEFAULT="\1 {{ item }}"'
  with_items: "{{ grub_cmdline }}"
  notify: update-grub
