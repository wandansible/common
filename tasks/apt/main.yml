---
- name: "Create apt keyrings directory"
  ansible.builtin.file:
    path: "/etc/apt/keyrings/"
    state: directory
    owner: root
    group: root
    mode: u=rwx,g=rx,o=rx

- name: "Configure apt.conf.d files"
  ansible.builtin.template:
    src: "apt/apt.conf.d"
    dest: "/etc/apt/apt.conf.d/{{ item.name }}"
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  loop: "{{ apt_conf_files }}"
  loop_control:
    label: "{{ item.name }}"

- name: "Configure apt preferences.d files"
  ansible.builtin.template:
    src: "apt/preferences.d"
    dest: "/etc/apt/preferences.d/{{ item.name }}"
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  loop: "{{ apt_preference_files }}"
  loop_control:
    label: "{{ item.name }}"

- name: Install https support for apt on older debian
  ansible.builtin.apt:
    pkg:
      - apt-transport-https
    state: present
  when:
    - ansible_distribution == "Debian"
    - ansible_distribution_major_version | int
    - ansible_distribution_major_version is version("9", "<=")

- name: Install gnupg2 on older ubuntu/debian
  ansible.builtin.apt:
    pkg:
      - gnupg2
    state: present
  when:
    - ansible_distribution_major_version | int
    - (ansible_distribution == "Debian" and ansible_distribution_major_version is version("8", "<=")) or
      (ansible_distribution == "Ubuntu" and ansible_distribution_version is version("17.10", "<="))
  register: _gnupg2_install

- name: Install gnupg on newer ubuntu/debian
  ansible.builtin.apt:
    pkg:
      - gnupg
    state: present
  when:
    - _gnupg2_install is skipped

- name: Set apt deb822 fact
  ansible.builtin.set_fact:
    apt_deb822_sources: >-
      {{
        false
        if ansible_distribution_major_version | int
        and (
          (ansible_distribution == "Debian" and ansible_distribution_major_version is version("12", "<="))
          or
          (ansible_distribution == "Ubuntu" and ansible_distribution_version is version("23.10", "<="))
        )
        else
        true
      }}

- name: Configure apt mirror
  ansible.builtin.template:
    src: "{{ _sources_template }}"
    dest: "{{ _sources_destination }}"
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  when: ansible_os_family == "Debian"
  vars:
    _sources_template: >-
      {{
        "apt/sources.list." + ansible_lsb.id | lower
        if not apt_deb822_sources
        else
        "apt/" + ansible_lsb.id | lower + ".sources"
      }}
    _sources_destination: >-
      {{
        "/etc/apt/sources.list"
        if not apt_deb822_sources
        else
        "/etc/apt/sources.list.d/" + ansible_lsb.id | lower + ".sources"
      }}
  register: apt_mirror

- name: Refresh apt cache when mirror changes  # noqa no-handler
  ansible.builtin.apt:
    update_cache: true
  when: apt_mirror is changed

- name: Install dependencies
  ansible.builtin.apt:
    pkg:
      - lsb-release
      - python3-debian
    state: present

- name: Add additional apt repos
  ansible.builtin.include_tasks:
    file: add-repo.yml
  loop: "{{ apt_repos }}"
  loop_control:
    label: "{{ item.name }}"

- name: Install packages
  ansible.builtin.apt:
    pkg: "{{ packages_install }}"
    state: present

- name: Upgrade packages  # noqa package-latest
  ansible.builtin.apt:
    pkg: "{{ packages_upgrade }}"
    state: latest

- name: Remove packages
  ansible.builtin.apt:
    pkg: "{{ packages_remove }}"
    state: absent

- name: Purge packages
  ansible.builtin.apt:
    pkg: "{{ packages_purge }}"
    purge: true
    state: absent
