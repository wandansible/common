---

- name: Refresh apt cache
  apt:
    update_cache: yes
  changed_when: false

- name: Install https support for apt
  apt:
    pkg:
      - apt-transport-https
    state: present
  when: not (ansible_distribution == "Debian" and ansible_distribution_version is version('10', '>='))

- name: Install gnupg on newer ubuntu/debian
  apt:
    pkg:
      - gnupg
    state: present
  when: >
    (ansible_distribution == "Debian" and ansible_distribution_version is version('9', '>=')) or
    (ansible_distribution == "Ubuntu" and ansible_distribution_version is version('18.04', '>='))

- name: Install gnupg2 on older ubuntu/debian
  apt:
    pkg:
      - gnupg2
    state: present
  when: >
    (ansible_distribution == "Debian" and ansible_distribution_version is version('9', '<')) or
    (ansible_distribution == "Ubuntu" and ansible_distribution_version is version('18.04', '<'))

- name: Configure apt mirror
  template:
    src: "templates/sources.list.{{ ansible_distribution|lower }}"
    dest: /etc/apt/sources.list
  when: ansible_os_family == "Debian"
  register: apt_mirror

- name: Refresh apt cache when mirror changes
  apt:
    update_cache: yes
  when: apt_mirror.changed == true

- name: Install needrestart
  apt:
    pkg: needrestart
    state: present

- name: Install intel microcode on physical hosts with an Intel CPU
  apt:
    pkg: "intel-microcode"
  when:
    - "ansible_virtualization_role == 'host'"
    - "ansible_processor | lower is search('intel')"

- name: Install amd64 microcode on physical hosts with an AMD CPU
  apt:
    pkg: "amd64-microcode"
  when:
    - "ansible_virtualization_role == 'host'"
    - "ansible_processor | lower is search('amd')"

- name: Add keys for useful repos
  apt_key:
    url: "{{ item.key.url }}"
    id: "{{ item.key.id | default(omit) }}"
    state: present
  with_items: "{{ useful_repos }}"

- name: Add useful repos
  apt_repository:
    repo: "{{ item.repo }}"
    filename: "{{ item.name }}"
    update_cache: yes
    state: present
  with_items: "{{ useful_repos }}"

- name: Install useful packages
  apt:
    pkg: "{{ useful_packages }}"
    state: present

- name: Merge all packages_install variables
  merge_vars:
    suffix_to_merge: packages_install__merge
    merged_var_name: packages_install
    expected_type: list
  when: not packages_install or packages_install | length == 0

- name: Merge all packages_upgrade variables
  merge_vars:
    suffix_to_merge: packages_upgrade__merge
    merged_var_name: packages_upgrade
    expected_type: list
  when: not packages_upgrade or packages_upgrade | length == 0

- name: Merge all packages_remove variables
  merge_vars:
    suffix_to_merge: packages_remove__merge
    merged_var_name: packages_remove
    expected_type: list
  when: not packages_remove or packages_remove | length == 0

- name: Merge all packages_purge variables
  merge_vars:
    suffix_to_merge: packages_purge__merge
    merged_var_name: packages_purge
    expected_type: list
  when: not packages_purge or packages_purge | length == 0

- name: Install packages
  apt:
    pkg: "{{ packages_install }}"
    state: present

- name: Upgrade packages
  apt:
    pkg: "{{ packages_upgrade }}"
    state: latest

- name: Remove packages
  apt:
    pkg: "{{ packages_remove }}"
    state: absent

- name: Purge packages
  apt:
    pkg: "{{ packages_purge }}"
    purge: yes
    state: absent
